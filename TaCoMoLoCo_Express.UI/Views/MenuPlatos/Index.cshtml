@model IEnumerable<TaCoMoLoCo_Express.UI.ViewModel.PlatoVM>


@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chill Eats</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <style>
        body * {
            font-family: 'Poppins', sans-serif;
        }

        .custom-rounded {
            border-radius: 25px;
        }
       /* Estilo para el botón de eliminar */
.grid-cols-4 > button {
    padding: 0.5rem; /* Espaciado interno del botón */
    border: none; /* Elimina el borde del botón si no es necesario */
    cursor: pointer; /* Cambia el cursor al pasar por encima del botón */
    outline: none; /* Elimina el contorno al enfocar el botón */
}

/* Estilo para el ícono dentro del botón */
.grid-cols-4 > button i {
    font-size: 0.75rem; /* Tamaño del ícono */
}

/* Estilo para el hover del botón */
.grid-cols-4 > button:hover {
    background-color: #e53e3e; /* Color de fondo cuando se pasa el mouse */
}



        [v-cloak] {
            display: none;
        }


        .main {
            flex: 3;
        }

        .sidebar {
            position: -webkit-sticky; /* Para soporte de Safari */
            position: sticky;
            top: 0; /* Ajusta esto según sea necesario, 0 para que se pegue al tope de la ventana */
            flex: 1;
            display: flex;
            flex-direction: column;
            max-height: 100vh;
            overflow-y: auto;
        }


        #cart-items {
            overflow-y: auto; /* Habilita el desplazamiento vertical si es necesario */
            max-height: 280px; /* Establece una altura máxima */
        }


        .flex-grow.flex.flex-col.justify-end {
            flex: 1; /* Hace que este contenedor llene el espacio restante */
            display: flex;
            flex-direction: column; /* Asegura que los elementos se apilen verticalmente */
            
        }

        .timer {
            background: rgba(217, 194, 105, .2);
        }

        .text-xxs {
            font-size: .9rem;
        }

        .custom-tr-rounded {
            border-radius: 0 25px 0 0;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex">
    <div class="flex flex-grow">
        <div class="main px-16 border-r border-gray-200 w-3/4 min-h-screen">
            <div class="h-12 mt-8 flex items-center">
                <i class="fa fa-bars cursor-pointer"></i>
                <h6 class="font-bold text-lg mx-10">Lista de Platos</h6>
                <div class="flex items-center ml-auto bg-gray-200 self-stretch custom-rounded px-4 w-2/3">
                    <i class="fa fa-search"></i>
                    <input type="text" class="px-4 self-stretch bg-gray-200 flex-grow outline-none" placeholder="Buscar">
                </div>
            </div>
            <div class="grid grid-cols-3 bg-orange-100 mt-12 rounded-lg"></div>
            <div class="flex mt-12 items-end">
                <h3 class="text-3xl font-bold text-orange-600 mb-4">Restaurantes</h3>
               @{
                   /*
                    * <img src="https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/hamburger_1f354.png" class="mx-4 h-8 w-8" alt="">
                    */
               }
                 
        
            </div>


          

<div class="grid grid-cols-9 gap-6 mt-12">
    @foreach (var rest in ViewBag.Restaurantes)
    {
        <div class="border rounded-lg p-4 flex flex-col items-center shadow-lg cursor-pointer transition duration-500 ease-in-out transform hover:-translate-y-1 hover:shadow-2xl"
             data-restaurante-id="@rest.Id"
             style="background: @(rest.Id == ViewBag.ActiveCategory ? "yellow" : "white")"
             onclick="seleccionarRestaurante(@rest.Id)">
            <div class="border rounded-full p-2 bg-white">
                <img class="h-12 w-12" src="/Imagenes/Restaurant.png" alt="Restaurante">
            </div>
            <p class="mt-3 mb-10 font-bold text-sm text-gray-700">@rest.Nombre</p>
        </div>
    }
    <button class="h-10 rounded-lg self-center hover:shadow-xl flex justify-center items-center bg-gray-100 p-3 ml-auto">
        <i class="fa fa-chevron-right"></i>
    </button>
</div>

            <div class="mt-12 grid grid-cols-3 gap-10">
                @foreach (var food in Model)
                {
                    // Verificar si food.Image no es nulo
                    if (food.Image != null && food.Image.Length > 0)
                    {
                        string imageBase64 = Convert.ToBase64String(food.Image);
                        string imageSrc = $"data:image/jpeg;base64,{imageBase64}";

                        <div class="flex flex-col">
                            <div class="shadow-lg relative h-40 custom-rounded" style="background-size: cover; background-repeat: no-repeat; background-image: url('@imageSrc');">
                                <div class="absolute bottom-0 left-0 w-1/3 bg-gray-200 custom-tr-rounded p-2 text-center text-xs">
                                    <span class="font-bold">10</span> - 15
                                </div>
                            </div>
                            <p class="mt-4 font-medium">@food.Nombre</p>
                            <div class="mt-2 flex items-center justify-between">
                                <span class="text-gray-600 font-hairline text-xs mx-4">@food.NombreCategoria</span>
                                <span class="text-gray-600 font-hairline text-xs mx-4">@food.Descripcion</span>
                                <span class="text-gray-600 font-hairline text-xs mx-4">₡@food.Precio</span>
                                <span>
                                    <button onclick="addToCart(@food.Id)" class="bg-blue-500 text-white rounded p-2 ml-auto">Comprar</button>
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-col">
                            <!-- Placeholder o mensaje de imagen no disponible -->
                            <p class="mt-4 font-medium">@food.Nombre</p>
                            <div class="mt-2 flex items-center justify-between">
                                <span class="text-gray-600 font-hairline text-xs mx-4">@food.NombreCategoria</span>
                                <span class="text-gray-600 font-hairline text-xs mx-4">@food.Descripcion</span>
                                <span class="text-gray-600 font-hairline text-xs mx-4">₡@food.Precio</span>
                                <span>
                                    <button onclick="addToCart(@food.Id)" class="bg-blue-500 text-white rounded p-2 ml-auto">Comprar</button>
                                </span>
                            </div>
                        </div>
                    }
                }
            </div>


        </div>
        <div class="bg-gray-200 sidebar flex flex-col min-h-screen w-1/4">
            <div class="px-6">
                <div class="mt-8">
                    <p class="font-medium text-xl">Mi orden 😎</p>
                </div>
                <div id="cart-items" class="mt-8 p-6 bg-white custom-rounded font-hairline text-xs">
                    <!-- Aquí se van a listar los items del carrito -->
                </div>
  

            </div>
            <div class="flex-grow flex flex-col justify-end pl-6 pr-6">
                <div class="flex justify-between items-center border-b-2 pb-2">
                    <span>Total:</span>
                    <span class="text-xl font-medium">₡<span id="total-price">0.00</span></span>
                </div>
                <div class="flex justify-between items-center border-b-2 pb-2">
                    <span>Subtotal:</span>
                    <span class="text-xl font-medium">₡<span id="subtotal-price">0.00</span></span>
                </div>

               <!-- Cupón Mejorado -->
                <div class="mt-6 mb-4 relative">
                    <label for="coupon-code" class="block text-sm font-medium text-gray-700 mb-2">Código de cupón</label>
                    <div class="relative rounded-md shadow-sm">
                        <input type="text" name="coupon-code" id="coupon-code" class="form-input block w-full pl-4 pr-14 py-3 rounded-md border border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 transition duration-300 ease-in-out" placeholder="ABC123">
                        <div class="absolute inset-y-0 right-0 flex items-center">
                            <button id="aplicar-cupon-btn" class="h-full py-0 px-4 bg-indigo-500 text-white rounded-r-md sm:text-sm focus:outline-none hover:bg-indigo-600 transition duration-300 ease-in-out">Aplicar</button>

                        </div>
                    </div>
                    <p id="coupon-feedback" class="mt-2 text-xs text-red-600 hidden">Cupón inválido. Por favor, inténtalo de nuevo.</p>
                </div>



                <!-- Fin del diseño mejorado para el cupón -->
                <div class="flex justify-end pt-4  font-bold">
                    <div class="ml-auto bg-yellow-400 p-6 rounded-lg cursor-pointer flex items-center justify-center flex-grow" onclick="checkout()">
                        Checkout <i class="ml-6 fa fa-arrow-right"></i>
                    </div>
                </div>
            </div>
        </div>

        </div>
    </div>
</body>

</html>
<style>
    .form-input {
        background-color: #f7fafc;
        border: 1px solid #cbd5e0;
        padding: 0.75rem 1rem;
        font-size: 0.875rem;
        line-height: 1.25rem;
        border-radius: 0.375rem;
        transition: all 0.3s ease-in-out;
    }

        .form-input:focus {
            border-color: #3182ce;
            box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.6);
            background-color: #edf2f7;
        }

        .form-input::placeholder {
            color: #a0aec0;
        }

        .form-input:invalid {
            border-color: #e53e3e;
        }

            .form-input:invalid:focus {
                border-color: #c53030;
                box-shadow: 0 0 0 2px rgba(229, 62, 62, 0.5);
            }

        .form-input:hover {
            border-color: #90cdf4;
        }

        .form-input.error {
            border-color: #e53e3e;
        }

            .form-input.error:focus {
                border-color: #c53030;
                box-shadow: 0 0 0 2px rgba(229, 62, 62, 0.5);
            }

    #coupon-feedback {
        color: #e53e3e;
        display: none;
    }

        #coupon-feedback.visible {
            display: block;
        }
</style>

<script>
    function seleccionarRestaurante(restauranteId) {
        // Resetear todos los colores de los restaurantes a blanco
        document.querySelectorAll('[data-restaurante-id]').forEach(item => {
            item.style.background = 'white'; // Asegúrate de que este sea el color de fondo original
        });

        // Cambiar el color de fondo del restaurante seleccionado a amarillo
        var restauranteSeleccionado = document.querySelector(`div[data-restaurante-id="${restauranteId}"]`);
        if (restauranteSeleccionado) {
            restauranteSeleccionado.style.background = 'yellow';
        }

        // Hacer una petición al servidor para obtener los platos del restaurante
        fetch(`/MenuPlatos/ObtenerPlatosPorIdRestaurante?idRestaurante=${restauranteId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No se pudo obtener la respuesta del servidor');
                }
                return response.json(); // Convertir la respuesta a JSON
            })
            .then(data => {
                // Verificar si recibes datos válidos
                if (data && data.length > 0) {
                    renderizarPlatos(data); // Renderizar los platos en la interfaz de usuario
                } else {
                    console.log('No se encontraron platos para el restaurante seleccionado');
                }
            })
            .catch(error => console.error('Error al obtener los platos:', error));
    }
    function addToCart(platoId) {
        fetch(`/MenuPlatos/ObtenerPlato?id=${platoId}`)
            .then(response => response.json())
            .then(plato => {
                // Chequear si el plato ya está en el carrito
                const existingItem = cart.find(item => item.id === plato.id);
                if (existingItem) {
                    existingItem.quantity++;
                } else {
                    cart.push({ ...plato, quantity: 1 });
                }
                renderCartItems();
                updateTotalPrice();
            })
            .catch(error => console.error('Error al agregar el plato al carrito:', error));
    }

    function renderizarPlatos(platos) {
        console.log("Datos recibidos por renderizarPlatos:", platos); // Imprime los datos recibidos

        // Limpiar el contenedor actual de platos
        var contenedorPlatos = document.querySelector('.grid.grid-cols-3.gap-10');
        contenedorPlatos.innerHTML = '';

        // Renderizar los nuevos platos
        platos.forEach(plato => {
            console.log("Procesando plato:", plato); // Imprime cada plato individualmente

            let imageSrc = '';
            if (plato.image) {
                // Asumiendo que plato.image ya es una cadena base64 correctamente formateada
                imageSrc = `data:image/jpeg;base64,${plato.image}`;
            } else {
                // Proporcionar una imagen predeterminada si no hay imagen
                imageSrc = '/Imagenes/placeholder.jpg'; // Asegúrate de tener una imagen de marcador de posición en esta ruta
            }

            var platoHTML = `
                <div class="flex flex-col">
                        <div class="shadow-lg relative h-40 custom-rounded" style="background-size: cover; background-repeat: no-repeat; background-image: url('${imageSrc}');">
                        <div class="absolute bottom-0 left-0 w-1/3 bg-gray-200 custom-tr-rounded p-2 text-center text-xs">
                            <span class="font-bold">10</span> min
                        </div>
                    </div>
                    <p class="mt-4 font-medium">${plato.nombre}</p>
                        <div class="mt-2 flex items-center justify-between">

                        <span class="text-gray-600 font-hairline text-xs mx-4">${plato.nombreCategoria}</span>
                        <span class="text-gray-600 font-hairline text-xs mx-4">${plato.descripcion}</span>
                        <span class="text-gray-600 font-hairline text-xs mx-4">${plato.precio}</span>
                        <span>
                             <button onclick="addToCart(${plato.id})" class="bg-blue-500 text-white rounded p-2 ml-auto">Comprar</button>
                        </span>
                    </div>
                </div>`;
            contenedorPlatos.innerHTML += platoHTML;
        });

    }



    function checkout() {
        fetch('/MenuPlatos/ProcesarCarrito', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(cart.map(item => ({
                Id: item.id,
                IdRestaurante: item.idRestaurante, // Asegúrate de tener esta propiedad en tus objetos del carrito
                IdCategoria: item.idCategoria,
                Nombre: item.nombre,
                Descripcion: item.descripcion,
                Precio: item.precio,
                Cantidad: item.quantity
            }))),
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('No se pudo enviar el carrito al servidor.');
            })
            .then(() => {
                alert('Compra realizada con éxito!');
                cart = [];
                renderCartItems();
                updateTotalPrice();
                // Opcional: Redirigir a la página de confirmación o actualizar la vista actual
                window.location.href = '/MenuPlatos/ConfirmacionCompra';    
            })
            .catch(error => console.error('Error al enviar el carrito:', error));
    }

</script>

<script>
    // Variable global para mantener el estado del carrito
    let cart = [];
    let cuponDescuento = 0; // Variable global para almacenar el descuento aplicado


    // Función para renderizar los items del carrito en el HTML
    function renderCartItems() {

        const cartItemsContainer = document.getElementById('cart-items');

        cartItemsContainer.innerHTML = '';

        cart.forEach((item, index) => {
            let imageSrc = '';
            if (item.image) {
                imageSrc = `data:image/jpeg;base64,${item.image}`;
            } else {
                // Proporcionar una imagen predeterminada si no hay imagen
                imageSrc = '/Imagenes/placeholder.jpg'; // Asegúrate de tener una imagen de marcador de posición en esta ruta
            }
            const itemHTML = `
        <div class="grid grid-cols-4 gap-1 mb-5 ${index === 0 ? 'mt-3' : ''}" style="position: relative;">
            <div class="h-10 rounded-lg relative" style="background-size: cover; background-repeat: no-repeat; background-image: url('${imageSrc}');">
                <button onclick="removeFromCart(${item.id})" class="absolute bottom-0 right-0 flex items-center justify-center bg-red-500 text-white rounded-full w-6 h-6 hover:bg-red-600 transition duration-300 ease-in-out">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="col-span-2 grid grid-cols-3 text-xxs font-semibold">
                <p class="flex justify-center items-center">${item.quantity}x</p>
                <p class="col-span-2 flex items-center">${item.nombre}</p>
            </div>
            <div class="flex justify-end items-center text-gray-600 font-hairline text-xs">
                $${(item.precio * item.quantity).toFixed(2)}
            </div>
        </div>
    `;



            cartItemsContainer.innerHTML += itemHTML;
        });
    }

    // Función para remover un item del carrito
    function removeFromCart(platoId) {
        fetch(`/MenuPlatos/ObtenerPlato?id=${platoId}`)
            .then(response => response.json())
            .then(plato => {
                // Chequear si el plato ya está en el carrito
                const index = cart.findIndex(item => item.id === plato.id);
                if (index !== -1) {
                    if (cart[index].quantity > 1) {
                        // Si la cantidad es mayor a 1, simplemente reducirla
                        cart[index].quantity--;
                    } else {
                        // Si la cantidad es 1, eliminar el ítem del carrito
                        cart.splice(index, 1);
                    }
                    renderCartItems();
                    updateTotalPrice();
                }
            })
            .catch(error => console.error('Error al remover el plato del carrito:', error));
    }


    // Función para actualizar el precio total
    function updateTotalPrice() {
        const totalPrice = cart.reduce((total, item) => total + item.precio * item.quantity, 0);
        document.getElementById('total-price').innerText = totalPrice.toFixed(2);

        if (cuponDescuento === null || cuponDescuento === undefined) {
            document.getElementById('subtotal-price').innerText = totalPrice.toFixed(2);
        } else {
            const discountedPrice = totalPrice - (totalPrice * cuponDescuento / 100);
            document.getElementById('subtotal-price').innerText = discountedPrice.toFixed(2);
        }
    }


    
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('#aplicar-cupon-btn').click(function (event) {
            console.log('Botón clickeado');
            console.log('@Url.Action("VerificarCupon", "MenuPlatos")');
            event.preventDefault(); // Esto previene la recarga de la página o cualquier acción por defecto del botón.
            var codigoCupon = $('#coupon-code').val();
            $.ajax({
                url: '@Url.Action("VerificarCupon", "MenuPlatos")', // Asegúrate de reemplazar "MenuPlatos" con el nombre real de tu controlador si es diferente
                type: 'POST',
                data: { codigoCupon: codigoCupon },
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        $('#coupon-feedback').removeClass('hidden').addClass('text-green-600').text(response.mensaje + " Descuento: " + response.descuento + "%");
                        cuponDescuento = response.descuento;
                        updateTotalPrice(); // Asegúrate de pasar el descuento como argumento
                    } else {
                        $('#coupon-feedback').removeClass('hidden').text(response.mensaje);
                    }
                }
            });
        });
    });
</script>
