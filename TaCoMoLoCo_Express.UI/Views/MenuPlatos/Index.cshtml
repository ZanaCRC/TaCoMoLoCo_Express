@model IEnumerable<TaCoMoLoCo_Express.Model.Plato>

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Platos</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <style>
        body * {
            font-family: 'Poppins', sans-serif;
        }

        .custom-rounded {
            border-radius: 25px;
        }

        [v-cloak] {
            display: none;
        }


        .main {
            flex: 3;
        }

        .sidebar {
            flex: 1;
        }

        .timer {
            background: rgba(217, 194, 105, .2);
        }

        .text-xxs {
            font-size: .9rem;
        }

        .custom-tr-rounded {
            border-radius: 0 25px 0 0;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex">
    <div class="flex flex-grow">
        <div class="main px-16 border-r border-gray-200 w-3/4 min-h-screen">
            <div class="h-12 mt-8 flex items-center">
                <i class="fa fa-bars cursor-pointer"></i>
                <h6 class="font-bold text-lg mx-10">Lista de Platos</h6>
                <div class="flex items-center ml-auto bg-gray-200 self-stretch custom-rounded px-4 w-2/3">
                    <i class="fa fa-search"></i>
                    <input type="text" class="px-4 self-stretch bg-gray-200 flex-grow outline-none" placeholder="Buscar">
                </div>
            </div>
            <div class="grid grid-cols-3 bg-orange-100 mt-12 rounded-lg"></div>
            <div class="flex mt-12 items-end">
                <h3 class="text-xl font-bold">Restaurantes</h3>
                <img src="https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/hamburger_1f354.png" class="mx-4 h-8 w-8" alt="">
            </div>
            <div class="grid grid-cols-9 gap-6 mt-12">

                    @foreach (var rest in ViewBag.Restaurantes)
                    {
                        <div class="border rounded-full p-2 flex flex-col items-center shadow-xl cursor-pointer transition-colors duration-700 ease-in-out"
                             style="background: @(rest.Id == ViewBag.ActiveCategory ? "yellow" : "white")"
                             onclick="seleccionarRestaurante(@rest.Id)">
                            <div class="border rounded-full p-2 bg-white">
                                <img class="h-12 w-12" src="/Imagenes/Restaurant.png" alt="si">
                            </div>
                            <p class="mt-3 mb-10 font-bold text-xs">@rest.Nombre</p>
                        </div>
                    }
                
               

                <button class="h-10 rounded-lg self-center hover:shadow-xl flex justify-center items-center bg-gray-100 p-3 ml-auto">
                    <i class="fa fa-chevron-right"></i>
                </button>
            </div>
            <div class="mt-12 grid grid-cols-3 gap-10">
                @foreach (var food in Model)
                {
                    <div class="flex flex-col">
                        <div class="shadow-lg relative h-40 custom-rounded" style="background-size: cover; background-repeat: no-repeat; background-image: url(/Imagenes/tres.jpg);">
                            <div class="absolute bottom-0 left-0 w-1/3 bg-gray-200 custom-tr-rounded p-2 text-center text-xs">
                                <span class="font-bold">10</span> - 15
                            </div>
                        </div>
                        <p class="mt-4 font-medium">@food.Nombre</p>
                        <div class="mt-2 flex items-center justify-between">

                            <span class="text-gray-600 font-hairline text-xs mx-4">@food.IdCategoria</span>
                            <span class="text-gray-600 font-hairline text-xs mx-4">@food.Descripcion</span>
                            <span class="text-gray-600 font-hairline text-xs mx-4">@food.Precio</span>
                            <span>
                                <button onclick="addToCart(@food.Id)" class="bg-blue-500 text-white rounded p-2 ml-auto">Comprar</button>
                            </span>
                             
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="bg-gray-200 sidebar flex flex-col min-h-screen w-1/4">
            <div class="px-6">
                <div class="h-12 mt-8 flex justify-end items-center">
                    <i class="fa fa-user"></i>
                    <div class="rounded-lg bg-yellow-400 px-3 font-bold text-xs py-1 ml-6">3</div>
                </div>
                <div class="mt-8">
                    <p class="font-medium text-xl">Mi orden 😎</p>
                </div>
                <div id="cart-items" class="mt-8 p-6 bg-white custom-rounded font-hairline text-xs">
                    <!-- Aquí se van a listar los items del carrito -->
                </div>
                <div class="grid grid-cols-4 gap-1 mb-5 mt-10">
                    <div class="h-10 rounded-lg  flex items-center px-0" style="background-color: rgba(255, 165, 0, 0.5); color: #feebc4;">
                        <i class="fa fa-car m-auto" style="color: rgba(255, 165, 0, 0.5); color: #ed8936;"></i>
                    </div>
                    <div class="col-span-2 grid grid-cols-2 text-xxs font-semibold">
                        <p class="col-span-2 flex justify-center items-center">Envío</p>
                    </div>
                    <div class="flex justify-end items-center text-gray-600 font-hairline text-xs">
                        $0.00
                    </div>
                </div>
            </div>
            <div class="flex-grow flex flex-col justify-end pl-6 pr-6">
                <div class="flex justify-between items-center border-b-2 pb-2">
                    <span>Total:</span>
                    <span class="text-xl font-medium">$<span id="total-price">0.00</span></span>
                </div>
                <div class="flex justify-end pt-4  font-bold">
                    <div class="ml-auto bg-yellow-400 p-6 rounded-lg cursor-pointer flex items-center justify-center flex-grow" onclick="checkout()">
                        Checkout <i class="ml-6 fa fa-arrow-right"></i>
                    </div>
                </div>
            </div>
        </div>

        </div>
    </div>
</body>

</html>

<script>
    function seleccionarRestaurante(restauranteId) {
        // Cambiar el color del restaurante seleccionado
        var restauranteSeleccionado = document.querySelector(`.flex[data-restaurante-id="${restauranteId}"]`);

        // Verificar si se encontró el restaurante antes de intentar cambiar el estilo
        if (restauranteSeleccionado) {
            // Resetear todos los colores de los restaurantes
            document.querySelectorAll('.flex[data-restaurante-id]').forEach(item => {
                item.style.background = 'white';
            });

            // Cambiar color del restaurante seleccionado
            restauranteSeleccionado.style.background = 'yellow';
        }

        // Hacer una petición al servidor para obtener los platos del restaurante
        fetch(`/MenuPlatos/ObtenerPlatosPorIdRestaurante?idRestaurante=${restauranteId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('No se pudo obtener la respuesta del servidor');
                }
                return response.json(); // Convertir la respuesta a JSON
            })
            .then(data => {
                // Verificar si recibes datos válidos
                if (data && data.length > 0) {
                    renderizarPlatos(data); // Renderizar los platos en la interfaz de usuario
                } else {
                    console.log('No se encontraron platos para el restaurante seleccionado');
                }
            })
            .catch(error => console.error('Error al obtener los platos:', error));
    }
    function addToCart(platoId) {
        fetch(`/MenuPlatos/ObtenerPlato?id=${platoId}`)
            .then(response => response.json())
            .then(plato => {
                // Chequear si el plato ya está en el carrito
                const existingItem = cart.find(item => item.id === plato.id);
                if (existingItem) {
                    existingItem.quantity++;
                } else {
                    cart.push({ ...plato, quantity: 1 });
                }
                renderCartItems();
                updateTotalPrice();
            })
            .catch(error => console.error('Error al agregar el plato al carrito:', error));
    }

    function renderizarPlatos(platos) {
        // Limpiar el contenedor actual de platos
        var contenedorPlatos = document.querySelector('.grid.grid-cols-3.gap-10');
        contenedorPlatos.innerHTML = '';

        // Renderizar los nuevos platos
        platos.forEach(plato => {
            var platoHTML = `
                    <div class="flex flex-col">
                            <div class="shadow-lg relative h-40 custom-rounded" style="background-size: cover; background-repeat: no-repeat; background-image: url(/Imagenes/tres.jpg);">
                            <div class="absolute bottom-0 left-0 w-1/3 bg-gray-200 custom-tr-rounded p-2 text-center text-xs">
                                <span class="font-bold">10</span> min
                            </div>
                        </div>
                        <p class="mt-4 font-medium">${plato.nombre}</p>
                            <div class="mt-2 flex items-center justify-between">
                            
                            <span class="text-gray-600 font-hairline text-xs mx-4">${plato.idCategoria}</span>
                            <span class="text-gray-600 font-hairline text-xs mx-4">${plato.descripcion}</span>
                            <span class="text-gray-600 font-hairline text-xs mx-4">${plato.precio}</span>
                            <span>
                                 <button onclick="addToCart(${plato.id})" class="bg-blue-500 text-white rounded p-2 ml-auto">Comprar</button>
                            </span>
                        </div>
                    </div>`;
            contenedorPlatos.innerHTML += platoHTML;
        });
    }

    function checkout() {
        fetch('/MenuPlatos/ProcesarCarrito', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(cart.map(item => ({
                Id: item.id,
                IdRestaurante: item.idRestaurante, // Asegúrate de tener esta propiedad en tus objetos del carrito
                IdCategoria: item.idCategoria,
                Nombre: item.nombre,
                Descripcion: item.descripcion,
                Precio: item.precio,
                Cantidad: item.quantity
            }))),
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('No se pudo enviar el carrito al servidor.');
            })
            .then(() => {
                alert('Compra realizada con éxito!');
                cart = [];
                renderCartItems();
                updateTotalPrice();
                // Opcional: Redirigir a la página de confirmación o actualizar la vista actual
                window.location.href = '/MenuPlatos/ConfirmacionCompra';
            })
            .catch(error => console.error('Error al enviar el carrito:', error));
    }

</script>

<script>
    // Variable global para mantener el estado del carrito
    let cart = [];


    // Función para renderizar los items del carrito en el HTML
    function renderCartItems() {
        const cartItemsContainer = document.getElementById('cart-items');

        cartItemsContainer.innerHTML = '';

        cart.forEach((item, index) => {
            const itemHTML = `
                <div class="grid grid-cols-4 gap-1 mb-5 ${index === 0 ? 'mt-3' : ''}">
                    <div class="h-10 rounded-lg" style="background-size: cover; background-repeat: no-repeat; background-image: url(/Imagenes/tres.jpg);"></div>
                    <div class="col-span-2 grid grid-cols-3 text-xxs font-semibold">
                        <p class="flex justify-center items-center">${item.quantity}x</p>
                        <p class="col-span-2 flex items-center">${item.nombre}</p>
                    </div>
                    <div class="flex justify-end items-center text-gray-600 font-hairline text-xs">
                        $${(item.precio * item.quantity).toFixed(2)}
                    </div>
                        <button onclick="removeFromCart(${item.id})" class="ml-auto bg-red-500 p-1 rounded text-white text-xs">X</button>

                </div>
            `;
            cartItemsContainer.innerHTML += itemHTML;
        });
    }


    // Función para remover un item del carrito
    function removeFromCart(platoId) {
       
        
        
        fetch(`/MenuPlatos/ObtenerPlato?id=${platoId}`)
            .then(response => response.json())
            .then(plato => {
                // Chequear si el plato ya está en el carrito
                const existingItem = cart.find(item => item.id === plato.id);
                if (existingItem.quantity) {
                    existingItem.quantity--;
                } else {
                    cart = cart.filter(item => item.id !== platoId);
                }
                renderCartItems();
                updateTotalPrice();
            })
            .catch(error => console.error('Error al agregar el plato al carrito:', error));
        

        renderCartItems();
        updateTotalPrice();
    }

    // Función para actualizar el precio total
    function updateTotalPrice() {
        const totalPrice = cart.reduce((total, item) => total + item.precio * item.quantity, 0);
        document.getElementById('total-price').innerText = totalPrice.toFixed(2);
    }

    
</script>



